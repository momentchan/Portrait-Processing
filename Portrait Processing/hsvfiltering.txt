#include "FuncDeclaration.h"
#include "MeanShift.h"
extern Mat colorImg;
extern Mat colorSegment;

vector <vector<Point>> separateRegionPoints;
vector <Mat> separateRegions;
vector <Mat> separateRegionsBlack;
vector <Mat> fillRegions;
vector<Scalar> colorValue;
vector<Scalar> colorPaletteRGB;
vector<Scalar> colorPaletteHSV;
vector<Scalar> colorPaletteTransform;
vector<vector<int>> colorIndexes;

bool selfPick = false;
int colorSpace = CV_BGR2RGB;

void ColorRefinement(Mat & src){
	int morph_elem = 0;
	int morph_size = 2;
	int open_operator = 2;
	int close_operator = 3;

	Mat element = getStructuringElement(morph_elem, Size(2 * morph_size + 1, 2 * morph_size + 1), Point(morph_size, morph_size));
	// Apply the specified morphology operation
	morphologyEx(src, src, close_operator, element);
	morphologyEx(src, src, open_operator, element);
	morphologyEx(src, src, open_operator, element);
}
vector<string> split(string str, char delimiter) {
	vector<string> internal;
	stringstream ss(str); // Turn the string into a stream.
	string tok;
	while (getline(ss, tok, delimiter)) {
		internal.push_back(tok);
	}
	return internal;
}
void ColorRead(){
	ifstream RGBData("Color Palette/colorDefineBGR.txt");
	ifstream HSVData("Color Palette/colorDefineHSV.txt");
	ifstream TransformData;
	if (colorSpace== CV_BGR2Lab)
		TransformData.open("Color Palette/colorDefineLAB.txt");
	else if (colorSpace == CV_BGR2YCrCb)
		TransformData.open("Color Palette/colorDefineYCrCb.txt");
	else if (colorSpace == CV_BGR2YUV)
		TransformData.open("Color Palette/colorDefineYUV.txt");
	else if (colorSpace == CV_BGR2XYZ)
		TransformData.open("Color Palette/colorDefineXYZ.txt");
	else if (colorSpace == CV_BGR2HSV)
		TransformData.open("Color Palette/colorDefineHSV.txt");
	else if (colorSpace == CV_BGR2RGB)
		TransformData.open("Color Palette/colorDefineRGB.txt");
	string str;
	while (getline(RGBData, str))
	{
		vector<string> sep = split(str, ' ');   
		float r = stof(sep[0]);
		float g = stof(sep[1]);
		float b = stof(sep[2]);
		colorPaletteRGB.push_back(Scalar(r, g, b));
		vector<int> initial(0);
		colorIndexes.push_back(initial);
	}
	while (getline(HSVData, str))
	{
		vector<string> sep = split(str, ' ');
		float h= stof(sep[0]);
		float s = stof(sep[1]);
		float v = stof(sep[2]);
		colorPaletteHSV.push_back(Scalar(h, s, v));
	}

	while (getline(TransformData, str))
	{
		vector<string> sep = split(str, ' ');
		float l = stof(sep[0]);
		float a = stof(sep[1]);
		float b = stof(sep[2]);
		colorPaletteTransform.push_back(Scalar(l, a, b));
		//cout << Scalar(l, a, b) << endl;
	}
}
void BGRtoYUV(Scalar & bgr){
	float b = float(bgr[0]);
	float g = float(bgr[1]);
	float r = float(bgr[2]);

	float y = 0.114*b + 0.587*g + 0.299*r;
	float u = 0.436*b - 0.28886*g - 0.14713*r;
	float v = -0.10001*b - 0.51499*g + 0.615*r;
	bgr = Scalar(y, u, v);
}
void BGRtoXYZ(Scalar & bgr){
	float b = float(bgr[0]/ 255.0);
	float g = float(bgr[1] / 255.0);
	float r = float(bgr[2] / 255.0);

	float X = 0.180423*b + 0.357580*g + 0.412453*r;
	float Y = 0.072169*b + 0.715160*g + 0.212671*r;
	float Z = 0.950227*b + 0.119193*g + 0.019334*r;
	bgr = Scalar(X, Y, Z);
}
float f(float t){
	if (t > 0.008856)
		t = pow(t, 0.33);
	else
		t = 7.787*t + 16 / 116;
	return t;
}
void XYZtoLab(Scalar & xyz){
	float x = float(xyz[0]);
	float y = float(xyz[1]);
	float z = float(xyz[2]);
	x /= 0.950456;
	z /= 1.088754;
	float L;
	if (y > 0.008856)
		L = 116 * pow(y, 0.33) - 16;
	else
		L = 903.3*y;

	float a = 500 * (f(x) - f(y));
	float b = 200 * (f(x) - f(y));
	xyz = Scalar(L,a,b);
}
void RGBtoLCH(Scalar & rgb){
	float r = rgb[0];
	float g = rgb[1];
	float b = rgb[2];


	float alpha = min(min(r, g), b) / max(max(r, g), b) / 100.0;
	float Q = exp(alpha*3.0);
	float L = (Q*max(max(r, g), b) + (1 - Q)*min(min(r, g), b))/2;
	float C = Q*(abs(r - g) + abs(g - b) + abs(b - r)) / 3;
	float H = atan((g - b) / (r - g));
	if (r - g < 0 && g - b >= 0) H += 180;
	if (r - g < 0 && g - b < 0) H -= 180;

	rgb[0] = L;
	rgb[1] = C;
	rgb[2] = H;

}


bool ColorDifferenceCompare(pair <int, double> c1, pair <int, double> c2) {
	double i = c1.second;
	double j = c2.second;
	return (i < j);
}
float DeltaFunction(Scalar lab1, Scalar lab2){

	float l1 = lab1[0];  float l2 = lab2[0];
	float a1 = lab1[1];  float a2 = lab2[1];
	float b1 = lab1[2];  float b2 = lab2[2];

	float xC1 = sqrt(pow(a1, 2) + pow(b1, 2));
	float xC2 = sqrt(pow(a2, 2) + pow(b2, 2));
	float xDL = l2 - l1;
	float xDC = xC2 - xC1;
	float xDE = sqrt(((l1 - l2) * (l1 - l2)) + ((a1 - a2) * (a1 - a2)) + ((b1 - b2) * (b1 - b2)));
	float xDH;
	if (sqrt(xDE) > (sqrt(abs(xDL)) + sqrt(abs(xDC)))) {
		xDH = sqrt((xDE * xDE) - (xDL * xDL) - (xDC * xDC));
	}
	else {
		xDH = 0;
	}
	float xSC = 1 + (0.045 * xC1);
	float xSH = 1 + (0.015 * xC1);
	xDC /= xSC;
	xDH /= xSH;
	float delta = sqrt(pow(xDL, 2) + pow(xDC, 2) + pow(xDH, 2));
	return delta;
}
float DeltaLCHFunction(Scalar LCH1, Scalar LCH2){

	float l1 = LCH1[0];  float l2 = LCH2[0];
	float c1 = LCH1[1];  float c2 = LCH2[1];
	float h1 = LCH1[2];  float h2 = LCH2[2];

	float dl = l1 - l2;
	float dh = h1 - h2;

	float dLCH = sqrt(pow(1.4456*dl, 2) + 1.4456*(c1*c1 + c2*c2 - 2 * c1*c2*cos(dh)));


	
	return dLCH;
}
void ColorRegistration(Scalar & color, Scalar hsv, int regionIndex){
	vector<pair <int, double>> differenceArray;
	vector<pair <int,double>> hsvFilteredIndex;
	if(colorSpace == CV_BGR2RGB)RGBtoLCH(color);
	int candidateNum = colorPaletteRGB.size();


	int colorIndex = 0;
	if (selfPick){
		imshow("Separate Regions", separateRegions[regionIndex]); waitKey(0);
		cin >> colorIndex;
		destroyWindow("Separate Regions");
		color = colorPaletteRGB[colorIndex-1];
		colorIndexes[colorIndex-1].push_back(regionIndex);
	}
	else{
		// Do HSV filtering
		float minDistance = INFINITY;
		for (int i = 0; i < colorPaletteHSV.size(); i++){
			Scalar colorMatch = colorPaletteHSV[i];
			float distance = abs(hsv[0] - colorMatch[0]);//DeltaLCHFunction(color, colorMatch);// 
			hsvFilteredIndex.push_back(make_pair(i, distance));
		}
		sort(hsvFilteredIndex.begin(), hsvFilteredIndex.end(), ColorDifferenceCompare);
		
		minDistance = INFINITY;
		for (int i = 0; i < candidateNum; i++){
			//cout << hsvFilteredIndex[i].first << " " << hsv[0] << " " << colorPaletteHSV[hsvFilteredIndex[i].first][0]<< " " << hsvFilteredIndex[i].second << endl;
			Scalar colorMatch = colorPaletteTransform[hsvFilteredIndex[i].first];
			if (colorSpace == CV_BGR2RGB) RGBtoLCH(colorMatch);
			float distance;

			if (colorSpace == CV_BGR2RGB) 
				distance = DeltaLCHFunction(color, colorMatch);
			else 
				distance = norm(Scalar((color[0] - colorMatch[0])*0.5, color[1] - colorMatch[1], color[2] - colorMatch[2]));

			differenceArray.push_back(make_pair(i, distance));
		}
		sort(differenceArray.begin(), differenceArray.end(), ColorDifferenceCompare);

		for (int i = 0; i < differenceArray.size(); i++){
			colorIndex = hsvFilteredIndex[differenceArray[i].first].first;
			// no area have used this color
			if (colorIndexes[colorIndex].size() == 0){
				color = colorPaletteRGB[colorIndex];
				colorIndexes[colorIndex].push_back(regionIndex);
				break;
			}
			// more than one area use this color
			else{
				bool insertible = true;
				for (int i = 0; i < colorIndexes[colorIndex].size(); i++){
					int CCNum = 0;
					CCNum = ConnectedComponentNumber(separateRegionsBlack[regionIndex], separateRegionsBlack[colorIndexes[colorIndex][i]]);
					//cout << CCNum << endl;

					// this two color is adjacent to each other
					if (CCNum == 1){
						// if the second option is too bad
						/*insertible = false;
						break;*/
						if (differenceArray[i].second/differenceArray[i + 1].second<0.6){
							insertible = true;
							break;
						}
						else{
							insertible = false;
							break;
						}
						
					}
				}
				if (insertible == true){
					color = colorPaletteRGB[colorIndex];
					colorIndexes[colorIndex].push_back(regionIndex);
					break;
				}
			}
		}
	}
}


void ColorSeparation(){
	ColorRead();

	cout << "Separating color regions ..." << endl;

	// Bilateral Filtering
	Mat bilateralFilteredImg;
	Mat originColorImg = Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255));
	bilateralFilter(colorImg, bilateralFilteredImg, 20, 100, 50);
	imwrite("Bilateral Image.jpg", bilateralFilteredImg);

	// Mean shifting
	colorSegment = Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255));
	IplImage* img = cvCloneImage(&(IplImage)colorImg);
	int **ilabels = new int *[img->height];
	for (int i = 0; i < img->height; i++) ilabels[i] = new int[img->width];
	int regionNum = MeanShift(img, ilabels);
	cout << "Segent region number: " << regionNum << endl;

	Mat colorTransform;
	vector<Scalar> colorTransformValue;
	cvtColor(bilateralFilteredImg, colorTransform, colorSpace);

	Mat colorHSV;
	vector<Scalar> colorHSVValue;
	cvtColor(bilateralFilteredImg, colorHSV, CV_BGR2HSV);

	// Initial
	for (int i = 0; i < regionNum; i++){
		colorValue.push_back(Scalar(0, 0, 0));
		colorHSVValue.push_back(Scalar(0, 0, 0));
		colorTransformValue.push_back(Scalar(0, 0, 0));
		separateRegions.push_back(Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255)));
	}
	separateRegionPoints.resize(regionNum);
	

	// Sort blobs size
	for (int i = 0; i < bilateralFilteredImg.rows; i++)
		for (int j = 0; j < bilateralFilteredImg.cols; j++)
		{
			int label = ilabels[i][j];
			separateRegionPoints[label].push_back(Point(i, j));
		}
	sort(separateRegionPoints.begin(), separateRegionPoints.end(), CompareLength);

	// Compute average color
	for (int i = 0; i < separateRegionPoints.size(); i++)
		for (int j = 0; j < separateRegionPoints[i].size(); j++)
			{
				int x = separateRegionPoints[i][j].x;
				int y = separateRegionPoints[i][j].y;
				colorValue[i] += Scalar(bilateralFilteredImg.at<Vec3b>(x, y)[0], bilateralFilteredImg.at<Vec3b>(x, y)[1], bilateralFilteredImg.at<Vec3b>(x, y)[2]);
				colorHSVValue[i] += Scalar(colorHSV.at<Vec3b>(x, y)[0], colorHSV.at<Vec3b>(x, y)[1], colorHSV.at<Vec3b>(x, y)[2]);
				colorTransformValue[i] += Scalar(colorTransform.at<Vec3b>(x, y)[0], colorTransform.at<Vec3b>(x, y)[1], colorTransform.at<Vec3b>(x, y)[2]);
			}


	for (int i = 0; i < regionNum; i++){
		int pixNum = separateRegionPoints[i].size();
		colorValue[i] /= pixNum;
		colorTransformValue[i] /= pixNum;
		colorHSVValue[i] /= pixNum;
		//cout << colorValue[i] << endl;
	}


	// Recover origin average color
	for (int i = 0; i < separateRegionPoints.size(); i++){
		Scalar color = colorValue[i];
		for (int j = 0; j < separateRegionPoints[i].size(); j++){
			int x = separateRegionPoints[i][j].x;
			int y = separateRegionPoints[i][j].y;
			originColorImg.at<Vec3b>(x, y) = Vec3b(color[0], color[1], color[2]);
			separateRegions[i].at<Vec3b>(x, y) = Vec3b(color[0], color[1], color[2]);
		}
		separateRegionsBlack.push_back(FindLargestRegion(separateRegions[i]));
	}
	// Background Removal
	colorValue.erase(colorValue.begin());
	colorTransformValue.erase(colorTransformValue.begin());
	colorHSVValue.erase(colorHSVValue.begin());
	separateRegions.erase(separateRegions.begin());
	separateRegionsBlack.erase(separateRegionsBlack.begin());

	//for (int i = 0; i < separateRegionsBlack.size(); i++)
		//cout << ConnectedComponentNumber(separateRegionsBlack[0], separateRegionsBlack[i]);
	imwrite("fillRegions/OriginColorSegment.jpg", originColorImg);
	for (int i = 0; i < separateRegions.size(); i++){
		ColorRegistration(colorTransformValue[i], colorHSVValue[i], i);
	}

	// Color Recovery
	for (int i = 0; i < colorIndexes.size(); i++){
		fillRegions.push_back(Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255)));
		for (int j = 0; j < colorIndexes[i].size(); j++){
			Mat grayImg;
			cvtColor(separateRegions[colorIndexes[i][j]], grayImg, CV_BGR2GRAY);
			Mat binaryImg = grayImg < 250;
			Mat nonZeroCoordinates;
			findNonZero(binaryImg, nonZeroCoordinates);
			for (int k = 0; k < nonZeroCoordinates.total(); k++) {
				int x = nonZeroCoordinates.at<Point>(k).x;
				int y = nonZeroCoordinates.at<Point>(k).y;
				fillRegions[i].at<Vec3b>(y, x) = Vec3b(colorPaletteRGB[i][0], colorPaletteRGB[i][1], colorPaletteRGB[i][2]);
				//separateRegions[i].at<Vec3b>(y, x) = Vec3b(colorValue[i][0], colorValue[i][1], colorValue[i][2]);
				colorSegment.at<Vec3b>(y, x) = Vec3b(colorPaletteRGB[i][0], colorPaletteRGB[i][1], colorPaletteRGB[i][2]);
			}
			//cout << colorValue[i] << endl;
		}
		if (colorIndexes[i].size() > 0){
			string fileName = outputFileName("fillRegions/fill", i + 1, ".jpg");
			imwrite(fileName, fillRegions[i]);
		}
	}
	
	imshow("Origin Color Image", originColorImg);
	imshow("Register Color Image", colorSegment); waitKey(0);
	imwrite("fillRegions/RegistrationColorSegment.jpg", colorSegment);
}


void ColorDefinement(){
	cout << "Separating color regions ..." << endl;

	// Mean shifting
	colorSegment = Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255));
	IplImage* img = cvCloneImage(&(IplImage)colorImg);
	int **ilabels = new int *[img->height];
	for (int i = 0; i < img->height; i++) ilabels[i] = new int[img->width];
	int regionNum = MeanShift(img, ilabels);
	cout << "Segent region number: " << regionNum << endl;
	vector <int> regionPixNum(regionNum);
	Mat colorTransform;
	vector<Scalar> colorTransformValue;
	cvtColor(colorImg, colorTransform, colorSpace);

	// Initial
	for (int i = 0; i < regionNum; i++){
		colorValue.push_back(Scalar(0, 0, 0));
		colorTransformValue.push_back(Scalar(0, 0, 0));
		regionPixNum[i] = 0;
		fillRegions.push_back(Mat(colorImg.size(), CV_8UC3, Scalar(255, 255, 255)));
	}

	// Compute average color
	for (int i = 0; i < colorImg.rows; i++)
	for (int j = 0; j < colorImg.cols; j++)
	{
		int label = ilabels[i][j];
		colorValue[label] += Scalar(colorImg.at<Vec3b>(i, j)[0], colorImg.at<Vec3b>(i, j)[1], colorImg.at<Vec3b>(i, j)[2]);
		colorTransformValue[label] += Scalar(colorTransform.at<Vec3b>(i, j)[0], colorTransform.at<Vec3b>(i, j)[1], colorTransform.at<Vec3b>(i, j)[2]);
		fillRegions[label].at<Vec3b>(i, j) = Vec3b(0, 0, 0);
		regionPixNum[label]++;
	}

	int backgroundIndex = 0;
	int maxPoints = 0;
	for (int i = 0; i < regionNum; i++){
		// Find background
		if (regionPixNum[i]>maxPoints) {
			backgroundIndex = i;
			maxPoints = regionPixNum[i];
		}
		colorValue[i] /= regionPixNum[i];
		colorTransformValue[i] /= regionPixNum[i];
		//ColorRefinement(separateRegions[i]);
	}


	// Color Recovery
	ofstream RGBColor;
	ofstream TransformColor;
	RGBColor.open("Color Palette/colorDefineBGR.txt");
	if (colorSpace == CV_BGR2Lab)
		TransformColor.open("Color Palette/colorDefineLAB.txt");
	else if (colorSpace == CV_BGR2YCrCb)
		TransformColor.open("Color Palette/colorDefineYCrCb.txt");
	else if (colorSpace == CV_BGR2YUV)
		TransformColor.open("Color Palette/colorDefineYUV.txt");
	else if (colorSpace == CV_BGR2XYZ)
		TransformColor.open("Color Palette/colorDefineXYZ.txt");
	else if (colorSpace == CV_BGR2HSV)
		TransformColor.open("Color Palette/colorDefineHSV.txt");
	else if (colorSpace == CV_BGR2RGB)
		TransformColor.open("Color Palette/colorDefineRGB.txt");

	// Color Recovery
	for (int i = 0; i < fillRegions.size(); i++){
		Mat grayImg;
		cvtColor(fillRegions[i], grayImg, CV_RGB2GRAY);
		Mat binaryImg = grayImg < 128;
		Mat nonZeroCoordinates;
		findNonZero(binaryImg, nonZeroCoordinates);
		for (int j = 0; j < nonZeroCoordinates.total(); j++) {
			int x = nonZeroCoordinates.at<Point>(j).x;
			int y = nonZeroCoordinates.at<Point>(j).y;
			fillRegions[i].at<Vec3b>(y, x) = Vec3b(colorValue[i][0], colorValue[i][1], colorValue[i][2]);
			colorSegment.at<Vec3b>(y, x) = Vec3b(colorValue[i][0], colorValue[i][1], colorValue[i][2]);
		}
		RGBColor << colorValue[i][0] << " " << colorValue[i][1] << " " << colorValue[i][2] << endl;
		TransformColor << colorTransformValue[i][0] << " " << colorTransformValue[i][1] << " " << colorTransformValue[i][2] << endl;
		string fileName = outputFileName("Color Palette/color", i , ".jpg");
		imwrite(fileName, fillRegions[i]);
	}
	RGBColor.close();
	TransformColor.close();

	imshow("Color Palette", colorSegment); waitKey(0);
	imwrite("Color Palette/Color Palette.jpg", colorSegment);
}